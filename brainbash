#!/usr/bin/env bash

die()
{
	printf '\e[31merror:\e[m %s\n' "$@" >&2
	exit 1
}

if (( $# )); then
	if [[ -f $1 ]]; then
		program=$(<"$1")
	else
		die "$1 is not a regular file"
	fi
else
	mapfile -t
	program=${MAPFILE[*]}
fi

program=${program//[^'><+-.,[]']}

declare -A tape
for (( ptr = 0; index < ${#program}; index++ )); do
	case ${program:index:1} in
		'>')
			(( ptr++ ))
			;;
		'<')
			(( ptr-- ))
			;;
		'+')
			(( tape[$ptr]++ ))
			(( tape[$ptr] > 255 )) && tape[$ptr]=0
			;;
		'-')
			(( tape[$ptr]-- ))
			(( tape[$ptr] < 0 )) && tape[$ptr]=255
			;;
		'.')
			printf -v val %o "${tape[$ptr]}"
			printf %b "\\$val"
			;;
		',')
			[[ -z $input ]] && {
				mapfile -n 1
				input+=${MAPFILE[0]}
			}

			[[ -n ${MAPFILE[0]+x} ]] && {
				printf -v "tape[$ptr]" %d "'${input::1}"
				input=${input#?}
			}
			;;
		'[')
			if (( tape[$ptr] )); then
				stack+=("$index")
			else
				for (( depth = 1; depth > 0 && ++index; )); do
					case ${program:index:1} in
						'[')
							(( depth++ ))
							;;
						']')
							(( depth-- ))
							;;
					esac

					(( index >= ${#program} )) && die "unmatched opening bracket"
				done
			fi
			;;
		']')
			(( ${#stack[@]} )) || die "unmatched closing bracket"

			(( tape[$ptr] )) && (( index = stack[-1] - 1 ))
			unset 'stack[-1]'
			;;
	esac
done
